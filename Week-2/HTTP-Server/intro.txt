Topics to cover:
-> ECMAScript
-> JavaScript
-> Node.js 
-> Bun
-> Node.js applications
-> What is an http server???
-> HTTP protocol
-> Introduction to express library
-> Creating a simple HTTP server
-> Understanding the syntax
-> Sending a POST request
-> Body parser
-> Environment variable
-> Why express does not parse the body by default??

What is ECMAScript?? -> scripting language specification on which JS is based standarized by ECMA, it serves as the guideline or the rules for scripting language design
What is Javascript?? -> is a scripting language that conforms to ECMAScript specification, but JS had additional features like DOM which ECMAScript does not have
what is Node.js? 
    -> Some smart people took out the V8 engine and added some backend things on top to create a new runtime to compete with BE languages like JavaScript
    -> JS was never meant to be run in the backend, eventually became very popular and is a popular choice of runtime on the backend
    -> Basically as JS runtime
What is bun? 
    -> It's also a JS runtime, but is much faster than NodeJS
    -> It is written in zig

Common JS Browser engines
1. V8 - used by google chrome - Common
2. SpiderMonkey - used by firefox - C + rust 

What can we do with NodeJS??
    -> create cli's (command line interface)
    -> create a video player
    -> create a game
    -> create a HTTP Server (main usecase)

HTTP -> Hyper text transfer protocol
    -> A protocol that is defined for machines to communicate
    -> Specfically for website, it is the most common way for your websites frontend to talk to its backend

First let us understand what are frontends and Backends
frontend -> everything that we see on the website
backend -> logic for doing something on the website/ dealing with data bases

What is a HTTP server??
    -> Some code that follows the HTTP protocol and is able to communicate with clients
    -> Think of it to be similar to the call app on your phone which helps u communicate with ur friends

HTTP client side:
    -> Protocol(HTTP/HTTPS)
    -> Address (URL/IP)
    -> Route
    -> Headers, Body and Query Params
    -> Method

    eg: https://chat.openai.com/backend-api/conversation
        here http is the protocol
        chat.openai.com is the URL
        backend-api/conversation is the route

        Header - cookie
        Body - what is 2+2(usually in JSON)
        Method: GET/POST
HTTP Server side:
    -> Response Headers
    -> Response body
    -> Status codes

    Response header ------
    Response body - 2+2 is equal to 4
    Status code: 200 - OK

Things that happen in your browser after you fire this request (Popular interview question)
1. Browser parses the URL
2. Does a DNS Lookup(converts google.com to an IP)
3. Establishes a connection to the IP

What is DNS resolution (domain name service):
    -> URL's are just like contacts in your phone
    -> In the end, they map to an IP
    -> If you ever buy a URL of your own, you will need to point it to the IP of your server

Things that happen on your server after the request is received
    -> You get the inputs(route,body,headers)
    -> You do some logic on the input, calculate the output
    -> You return the output body, headers and status code

HTTP requests;
1. GET(read)
2. POST(create)
3. PUT(update)
4. DELETE(delete)

Status codes:
    -> 200: Everything OK
    -> 404: Page not found
    -> 403: Authentication error
    -> 500: Internal server error

There are many libraries that let you create HTTP servers, the most famous one is express
